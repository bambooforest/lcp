{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://liri.linguistik.uzh.ch/cobquec3.schema.json",
    "title": "Constraint-based Query Configuration",
    "description": "A linguistic query for LCP data Representation",
    "type": "object",
    "$defs": {
        "entityRef": {
            "description": "a reference to an entity (e.g. ‹t1›)",
            "type": "string",
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$",
            "comment": {
                "type": "string"
            }
        },
        "numberExpression": {
            "description": "an expression that evaluates to a number (not a recursive pattern; 2nd check required on BE)",
            "type": "string",
            "pattern": "^[(]*([a-zA-Z][a-zA-Z0-9]*|-?([0-9]+[.])?[0-9]+[smy]?)( +[*/+-] +[(]*([a-zA-Z][a-zA-Z0-9]*|-?([0-9]+[.])?[0-9]+[smy]?))?[)]*$"
        },
        "stringAttribute": {
            "description": "a string attribute of an entity",
            "type": "string",
            "$ref": "#/$defs/entityRef"
        },
        "stringUnit": {
            "description": "a string",
            "type": "string",
            "oneOf": [
                {
                    "description": "a string attribute",
                    "$ref": "#/$defs/stringAttribute"
                },
                {
                    "description": "a string literal",
                    "$ref": "#/$defs/stringLiteral"
                }
            ]
        },
        "stringLiteral": {
            "description": "a string encapsulated in quotes",
            "type": "string",
            "pattern": "^('.+'|\".+\")$"
        },
        "RegEx": {
            "description": "A regular expression literal",
            "type": "string",
            "pattern": "^/.+/$"
        },
        "mathCompOperator": {
            "description": "operators for mathematical expressions (i.e. evaluate to bool)",
            "type": "string",
            "enum": [
                "=",
                "!=",
                ">",
                "<",
                ">=",
                "<="
            ]
        },
        "stringRegexOperator": {
            "description": "operators for regex comparison",
            "type": "string",
            "enum": [
                "~",
                "!~"
            ]
        },
        "compOperator": {
            "description": "operators for regular string comparison",
            "type": "string",
            "enum": [
                "=",
                "!="
            ]
        },
        "attributeRef": {
            "description": "a reference to an attribute (e.g. ‹t1.lemma›)",
            "type": "string",
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*([.][a-zA-Z][a-zA-Z0-9]*)*$",
            "comment": {
                "type": "string"
            }
        },
        "mathComparison": {
            "description": "a comparison of mathematical objects",
            "type": "array",
            "prefixItems": [
                {
                    "type": "string",
                    "$ref": "#/$defs/numberExpression"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/mathCompOperator"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/numberExpression"
                }
            ],
            "minItems": 3,
            "maxItems": 3
        },
        "stringComparison": {
            "description": "a comparison of string objects",
            "type": "array",
            "prefixItems": [
                {
                    "type": "string",
                    "$ref": "#/$defs/entityRef"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/compOperator"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/stringLiteral"
                }
            ],
            "minItems": 3,
            "maxItems": 3
        },
        "stringRegexComparison": {
            "description": "a comparison of string objects",
            "type": "array",
            "prefixItems": [
                {
                    "type": "string",
                    "$ref": "#/$defs/stringAttribute"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/stringRegexOperator"
                },
                {
                    "type": "string",
                    "$ref": "#/$defs/RegEx"
                }
            ],
            "minItems": 3,
            "maxItems": 3
        },
        "entityComparison": {
            "description": "a comparison of entities",
            "type": "array",
            "prefixItems": [
                {
                    "$ref": "#/$defs/entityRef"
                },
                {
                    "$ref": "#/$defs/compOperator"
                },
                {
                    "$ref": "#/$defs/entityRef"
                }
            ],
            "minItems": 3,
            "maxItems": 3
        },
        "comparison": {
            "description": "any comparison that can be evaluated to boolean",
            "type": "object",
            "properties": {
                "mathComparison": {
                    "$ref": "#/$defs/mathComparison"
                },
                "stringComparison": {
                    "$ref": "#/$defs/stringComparison"
                },
                "stringRegexComparison": {
                    "$ref": "#/$defs/stringRegexComparison"
                },
                "entityComparison": {
                    "$ref": "#/$defs/entityComparison"
                }
            },
            "oneOf": [{
                    "required": [
                        "mathComparison"
                    ]
                },
                {
                    "required": [
                        "stringComparison"
                    ]
                },
                {
                    "required": [
                        "stringRegexComparison"
                    ]
                },
                {
                    "required": [
                        "entityComparison"
                    ]
                }
            ],
            "comment": {
                "type": "string"
            }
        },
        "logicalOpUnary": {
            "description": "the only unary logical operator",
            "type": "object",
            "properties": {
                "operator": {
                    "type": "string",
                    "enum": [
                        "NOT"
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    },
                    "minItems": 1,
                    "maxItems": 1
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "operator",
                "args"
            ]
        },
        "logicalOpBinary": {
            "description": "binary logical operators",
            "type": "object",
            "properties": {
                "operator": {
                    "type": "string",
                    "enum": [
                        "NAND",
                        "!AND",
                        "¬AND",
                        "NOR",
                        "!OR",
                        "¬OR",
                        "XOR",
                        "IMPLY",
                        "NIMPLY",
                        "!IMPLY",
                        "¬IMPLY"
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    },
                    "minItems": 2,
                    "maxItems": 2
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "operator",
                "args"
            ]
        },
        "logicalOpNAry": {
            "description": "n-ary logical operators",
            "type": "object",
            "properties": {
                "operator": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    },
                    "minItems": 2
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "operator",
                "args"
            ]
        },
        "universalQuantification": {
            "description": "true if (not) all entities matched by the first part imply the second condition",
            "type": "object",
            "properties": {
                "quantor": {
                    "type": "string",
                    "enum": [
                        "ALL",
                        "!ALL",
                        "¬ALL"
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    },
                    "minItems": 2,
                    "maxItems": 2
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "quantor",
                "args"
            ]
        },
        "existentialQuantification": {
            "description": "true if there is (not) an entity matched by the argument",
            "type": "object",
            "properties": {
                "quantor": {
                    "type": "string",
                    "enum": [
                        "EXIST",
                        "!EXIST",
                        "¬EXIST"
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    },
                    "minItems": 1,
                    "maxItems": 1
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "quantor",
                "args"
            ]
        },
        "expression": {
            "description": "expressions return boolean values",
            "type": "object",
            "properties": {
                "logicalOpUnary": {
                    "$ref": "#/$defs/logicalOpUnary"
                },
                "logicalOpBinary": {
                    "$ref": "#/$defs/logicalOpBinary"
                },
                "logicalOpNAry": {
                    "$ref": "#/$defs/logicalOpNAry"
                },
                "universalQuantification": {
                    "$ref": "#/$defs/universalQuantification"
                },
                "existentialQuantification": {
                    "$ref": "#/$defs/existentialQuantification"
                }
            },
            "oneOf": [{
                    "required": ["logicalOpUnary"]
                },
                {
                    "required": ["logicalOpBinary"]
                },
                {
                    "required": ["logicalOpNAry"]
                },
                {
                    "required": ["universalQuantification"]
                },
                {
                    "required": ["existentialQuantification"]
                }
            ]
        },
        "statement": {
            "description": "empty description",
            "type": "object",
            "oneOf": [{
                    "$ref": "#/$defs/expression"
                },
                {
                    "$ref": "#/$defs/unit"
                },
                {
                    "$ref": "#/$defs/multipleUnits"
                }
            ]
        },
        "unit": {
            "type": "object",
            "properties": {
                "layer": {
                    "description": "The layer of the respective unit",
                    "type": "string"
                },
                "partOf": {
                    "type": "string"
                },
                "label": {
                    "description": "The label assigned to a unit to allow referring to it in the constraint section",
                    "type": "string"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/constraint"
                    }
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "layer"
            ]
        },
        "constraint": {
            "type": "object",
            "oneOf": [{
                "$ref": "#/$defs/comparison"
            }, {
                "$ref": "#/$defs/statement"
            }]
        },
        "sequence": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "repetition": {
                    "type": "string",
                    "pattern": "^(\\d+\\.\\.(\\d+|\\*)|[1-9]+\\d*)$"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/statement"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "members"
            ]
        },
        "group": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/statement"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "members"
            ]
        },
        "set": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/statement"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "members"
            ]
        },
        "multipleUnits": {
            "type": "object",
            "properties": {
                "sequence": {
                    "$ref": "#/$defs/sequence"
                },
                "group": {
                    "$ref": "#/$defs/group"
                },
                "set": {
                    "$ref": "#/$defs/set"
                }
            },
            "oneOf": [{
                    "required": [
                        "sequence"
                    ]
                },
                {
                    "required": [
                        "group"
                    ]
                },
                {
                    "required": [
                        "set"
                    ]
                }
            ]
        },
        "resultSetPlain": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "A single plain entity (id) is required as context",
                    "type": "string"
                },
                "entities": {
                    "description": "A non-empty list of plain entities (ids)",
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/entityRef"
                    },
                    "minItems": 1
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "context"
            ]
        },
        "resultSetStatAnalysis": {
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "A non-empty list of attributes",
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/attributeRef"
                    },
                    "minItems": 1
                },
                "functions": {
                    "description": "A non-empty list of functions",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "frequency",
                            "minimum",
                            "maximum",
                            "average",
                            "stddev"
                        ]
                    },
                    "minItems": 1
                },
                "filter": {
                    "$ref": "#/$defs/expression"
                },
                "comment": {
                    "type": "string"
                }
            },
            "required": [
                "attributes",
                "functions"
            ]
        },
        "resultSetCollAnalysis": {
            "type": "object",
            "properties": {
                "center": {
                    "description": "A single plain entity (id)",
                    "$ref": "#/$defs/entityRef"
                },
                "window": {
                    "description": "A range",
                    "type": "string",
                    "pattern": "^([-+][0-9]+|0)[.]{2}([-+][0-9]+|0)$"
                },
                "space": {
                    "description": "A non-empty list of entities",
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/entityRef"
                    }
                },
                "attribute": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                }
            },
            "oneOf": [{
                    "required": [
                        "center",
                        "window"
                    ]
                },
                {
                    "required": [
                        "space"
                    ]
                }
            ],
            "required": [
                "attribute"
            ]
        },
        "resultSet": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "plain": {
                    "$ref": "#/$defs/resultSetPlain"
                },
                "statAnalysis": {
                    "$ref": "#/$defs/resultSetStatAnalysis"
                },
                "collAnalysis": {
                    "$ref": "#/$defs/resultSetCollAnalysis"
                }
            },
            "oneOf": [{
                    "required": [
                        "plain"
                    ]
                },
                {
                    "required": [
                        "statAnalysis"
                    ]
                },
                {
                    "required": [
                        "collAnalysis"
                    ]
                }
            ],
            "required": [
                "label"
            ]
        }
    },
    "properties": {
        "query": {
            "description": "A list of units (token, sentence, named entity, ...) that need to exist",
            "type": "array",
            "items": {
                "$ref": "#/$defs/statement"
            }
        },
        "resultSets": {
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#/$defs/resultSet"
            }
        },
        "comment": {
            "type": "string"
        }
    },
    "required": [
        "query",
        "resultSets"
    ]
}

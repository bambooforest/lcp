part_of : "@"label

operator : OPERATOR
operand_left : math                                   // skip: math
operand_right : math                                  // skip: math
operation : operand_left operator operand_right
math : POS_INT
     | NEG_INT
     | FLOAT
     | function
     | operation
min : POS_INT
max : POS_INT | "*"
repetition : min".."max

left_span : NEG_INT
right_span : POS_INT
window : left_span ("..+"|"..") right_span

quantifier : NEGATION? EXISTENTIAL
           | NEGATION? UNIVERSAL

quantification : quantifier _NL _INDENT (unit | sequence | set) _DEDENT

arguments : ((entity | function | attribute | string | regex | math) ","?)+
function_name : FUNCTION_NAME
function : function_name arguments ")"

case_insensitive : "i"
pattern : REGEX
regex : pattern case_insensitive?
string : DOUBLE_QUOTED_STRING
attribute : ATTRIBUTE
label : LABEL | ANALYSIS_FUNCTIONS // e.g. it's OK to use "frequency" as a label
entity : LABEL | ANALYSIS_FUNCTIONS // e.g. it's OK to use "frequency" as an entity reference
reference : LABEL | ANALYSIS_FUNCTIONS | ATTRIBUTE
layer : LAYER

left : (function | reference | attribute | string | regex | math)
right : (function | reference | attribute | string | regex | math)
comparator : NEGATION? (EQUAL|COMPARATIVE|CONTAIN)

comparison : left comparator right

unary_operator : NEGATION
nary_operator : CONJUNCTION | DISJUNCTION

logical_expression : unary_operator _NL _INDENT arg _NL* _DEDENT
                   | nary_operator _NL _INDENT args _DEDENT

unit : layer(part_of)? label? _NL (_INDENT constraints? _DEDENT)?
constraint : quantification
           | unit
           | logical_expression
           | comparison
arg: quantification
           | unit
           | logical_expression
           | comparison
constraints : (constraint _NL*)+                     // skip: constraint
args : (constraint _NL*)+                            // skip: constraint

members : ((unit|sequence) _NL*)+
set : "set"(part_of)? label? _NL _INDENT members _DEDENT
sequence : "sequence"(part_of)? label? repetition? _NL _INDENT members _DEDENT

result : label "=>" (results_plain | results_analysis | results_collocation)
results : result+                                           // skip: result

results_plain        : "plain" _NL _INDENT results_plain_context results_plain_entities _DEDENT // rename: results_plain_context>context results_plain_entities>entities
results_plain_context : "context" _NL _INDENT (entity _NL*)+ _DEDENT // skip: entity
results_plain_entities : "entities" _NL _INDENT (entity _NL*)+ _DEDENT // skip: entity

results_analysis     : "analysis" _NL _INDENT results_analysis_attributes results_analysis_functions results_analysis_filter? _DEDENT // rename: results_analysis_attributes>attributes results_analysis_functions>functions results_analysis_filter>filter
results_analysis_attributes : "attributes" _NL _INDENT ((attribute|function) _NL*)+ _DEDENT
results_analysis_functions : "functions" _NL _INDENT (ANALYSIS_FUNCTIONS _NL*)+ _DEDENT
results_analysis_filter : "filter" _NL _INDENT ((comparison | comparison) _NL*)+ _DEDENT // dirty trick to force 'comparison' key after lark_to_cobquec

results_collocation        : "collocation" _NL _INDENT (results_collocation_center | results_collocation_space) results_collocation_attribute _DEDENT  // rename: results_collocation_space>space results_collocation_attribute>attribute results_collocation_center>center
results_collocation_space : "space" _NL _INDENT entity _NL* _DEDENT
results_collocation_center : "center" _NL _INDENT entity _NL _DEDENT "window" _NL _INDENT window _NL _DEDENT
results_collocation_attribute : "attribute" _NL _INDENT (entity|attribute|function) _NL* _DEDENT

query : ((quantification | sequence | set | unit | constraint) _NL*)+

top : query results


FUNCTION_NAME.3 : "length("
                | "size("
                | "range("
                | "position("
                | "start("
                | "end("
                | "century("
                | "date("
                | "year("
                | "day("

ANALYSIS_FUNCTIONS.3 : "frequency"
                   | "minimum"
                   | "maximum"
                   | "average"
                   | "stddev"

EXISTENTIAL.2 : "EXISTS"
UNIVERSAL.2 : "ALL"
CONJUNCTION.2 : "AND"
DISJUNCTION.2 : "OR"

POS_INT : /[1-9]*[0-9]/                   // type: number
NEG_INT : /-[1-9]*[0-9]/                  // type: number
FLOAT : /-?[1-9]*[0-9]\.[0-9]+/           // type: number

NEGATION.2 : /(~|Â¬|!|not )/i
COMPARATIVE : /[><]=?/
EQUAL : "="
CONTAIN : "contain"

LAYER : /[A-Z][a-zA-Z0-9_]+/
LABEL : /[a-z][a-zA-Z0-9_]*/
ATTRIBUTE : /[a-z][a-zA-Z0-9_]*(\.([a-zA-Z0-9_]+))+/

DOUBLE_QUOTED_STRING : /"[^\n]*?"/
REGEX           : /\/.+\//

OPERATOR : /(\+|-|\/|\*)/

DL_COMMENT      : /<#(>|#*[^#>]+)*#+>/ _NL

_NL: /((#[^\r\n]*)?\r?\n[\t ]*)+/

%import common.WS
%import common.SH_COMMENT
%import common.WS_INLINE
%declare _INDENT _DEDENT
%ignore WS_INLINE
%ignore DL_COMMENT
%ignore WS
%ignore SH_COMMENT
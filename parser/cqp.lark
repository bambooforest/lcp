label                : /[a-z_-][a-z0-9_-]{0,18}/ ":"
EQUALS               : "="
REQUALS              : "~"
not_                 : "!"
or_                  : "|"
and_                 : "&"
lbracket             : "("
rbracket             : ")"
ANY_AMOUNT           : "*"
ONE_OR_MORE          : "+"
ZERO_OR_ONE          : "?"
inner_relation       : not_?  ( EQUALS | REQUALS )
RANGE_MIN            : NUMBER
RANGE_MAX            : NUMBER
RANGE_EXACT          : NUMBER
range                : "{" ( RANGE_MIN? "," RANGE_MAX? | RANGE_EXACT ) "}"
quantifier           : ANY_AMOUNT | ONE_OR_MORE | ZERO_OR_ONE | range
attribute            : /[a-z_-][a-z0-9_-]{0,18}/
query                : attribute inner_relation DOUBLE_QUOTED_STRING modifier?
vp                   : (and_ | or_ ) ( query | node_section ) // can delete query | and brackets here?
node_section         : not_? "(" node_section vp* ")" | query vp* // !( x="yy"%c )
modifier             : /%[cdl]{1,3}/
bracket_node         : label? "[" node_section ( vp )* "]" quantifier?
empty_node           : "[" "]" quantifier?
string_node          : DOUBLE_QUOTED_STRING quantifier?
node                 : label? ( bracket_node | empty_node | string_node )
brackets             : label? "(" ( expr | node+ or_ node+ ) ")" quantifier?
fake_brackets        : (node | brackets)+ ( or_ (node | brackets)+ )+
expr                 : ( node | brackets | fake_brackets )+
top                  : expr

DOUBLE_QUOTED_STRING : /"[^"\n]*"/
SINGLE_QUOTED_STRING : /'[^'\n]*'/
STRING               : /[^\/]+/
NEWLINE              : "\n"
COMMENT              : /#[^\n]*($|\n)/

%import common.NUMBER
%import common.WS
%import common.SH_COMMENT
%ignore WS
%ignore SH_COMMENT
%ignore NEWLINE
